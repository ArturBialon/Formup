import { Injectable } from '@angular/core';
import { ForwarderRequestDTO, ILoginService, LoginService, UserLoginDTO, UserResponseDTO } from './autogenerated/autogenerated.service';
import { Router } from '@angular/router';
import { BehaviorSubject, map, Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AccountService implements ILoginService{
  private userSubject: BehaviorSubject<UserResponseDTO> = new BehaviorSubject<UserResponseDTO>({} as UserResponseDTO);
  user$: Observable<UserResponseDTO> = this.userSubject.asObservable();

  constructor(
    private router: Router,
    private userService: LoginService
  ) { }

  userLogin(user: UserLoginDTO | null | undefined): Observable<UserResponseDTO | null> {
    return this.userService.userLogin(user).pipe(
      map(res => {
        const user: UserResponseDTO = {
          Id: res.Id,
          UserName: res.UserName,
          Token: res.Token
        };
        this.userSubject.next(user);
        return user;
      })
    );
  }

  addForwarder(forwarder: ForwarderRequestDTO | null | undefined): Observable<UserResponseDTO | null> {
    throw new Error('Method not implemented.');
  }

  logout(): void {
    this.userSubject.next({} as UserResponseDTO);
    this.router.navigateByUrl('/home');
  }
}
